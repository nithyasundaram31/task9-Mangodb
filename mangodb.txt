//create database
use zenclass;

//create collection
db.createCollection("users");
db.createCollection("attendance");
db.createCollection("codekata");
db.createCollection("topics");
db.createCollection("tasks");
db.createCollection("company_drives");
db.createCollection("mentors");

//To insert a document into a collection
//users collection
db.users.insertMany([
  { _id: 1, name: "Ram", mentor_id: 1 },
  { _id: 2, name: "Rio", mentor_id: 2 },
  { _id: 3, name: "pooja", mentor_id: 1 }
]);

//Mentors collection
db.mentors.insertMany([
  { _id: 1, name: "john", mentee_count: 25 },
  { _id: 2, name: "bob", mentee_count: 10 }
]);

//Codekatta collection
db.codekata.insertMany([
  { user_id: 1, problems_solved: 150 },
  { user_id: 2, problems_solved: 100 },
  { user_id: 3, problems_solved: 80 }
]);

//Attendence Collection
db.attendance.insertMany([
  { user_id: 1, date: new Date("2020-10-16"), present: true },
  { user_id: 2, date: new Date("2020-10-18"), present: false },
  { user_id: 3, date: new Date("2020-10-20"), present: false }
]);

//Tasks collection
db.tasks.insertMany([
  { topic_id: 1, task: "Build a REST API", date: new Date("2020-10-16"),submitted: true, user_id: 1 },
  { topic_id: 2, task: "MongoDB Query", date: new Date("2020-10-20"), submitted: false, user_id: 2 },
  { topic_id: 3, task: "MySQL Query", date: new Date("2020-11-10"), submitted: false, user_id: 3 }
]);

// TOPICS collection
db.topics.insertMany([
  { _id: 1, name: "Node.js", date: new Date("2020-10-10") },
  { _id: 2, name: "Javascript", date: new Date("2020-10-18") },
  { _id: 3, name: "React", date: new Date("2020-11-05") }
]);

// COMPANY_DRIVES collection
db.company_drives.insertMany([
  { user_id: 1, company: "IBM", date: new Date("2020-10-20") },
  { user_id: 2, company: "Zohoo", date: new Date("2020-10-25") },
  { user_id: 3, company: "Google", date: new Date("2020-11-01") }
]);

----------------------------------------------------------------------------------------------------------

//QUERIES:

1)Find all the topics and tasks which are thought in the month of October
db.topics.find({
  date: {
    $gte: new Date("2020-10-01"),
    $lte: new Date("2020-10-31")
  }
});

output:
[  
  {
    _id: 1,
    name: 'Node.js',
    date: ISODate('2020-10-10T00:00:00.000Z')
  },
  {
    _id: 2,
    name: 'Javascript',
    date: ISODate('2020-10-18T00:00:00.000Z')
  }
]

db.tasks.find({
  date: {
    $gte: new Date("2020-10-01"),
    $lte: new Date("2020-10-31")
  }
});

output:
[  
  {
    _id: ObjectId('680cc24c17eb38b4eeb5f899'),
    topic_id: 1,
    task: 'Build a REST API',
    date: ISODate('2020-10-16T00:00:00.000Z'),
    submitted: true,
    user_id: 1
  },
  {
    _id: ObjectId('680cc24c17eb38b4eeb5f89a'),
    topic_id: 2,
    task: 'MongoDB Query',
    date: ISODate('2020-10-20T00:00:00.000Z'),
    submitted: false,
    user_id: 2
  }
]
---------------------------------------------------------------------------------------------------------------
2) Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020
db.company_drives.find({
  date: {
    $gte: new Date("2020-10-15"),
    $lte: new Date("2020-10-31")
  }
});

output:
[  
  {
    _id: ObjectId('680cb7fcac23bbf581b5f899'),
    user_id: 1,
    company: 'IBM',
    date: ISODate('2020-10-20T00:00:00.000Z')
  },
  {
    _id: ObjectId('680cb7fcac23bbf581b5f89a'),
    user_id: 2,
    company: 'Zohoo',
    date: ISODate('2020-10-25T00:00:00.000Z')
  }
]
------------------------------------------------------------------------------------------------------------------
3)Find all the company drives and students who are appeared for the placement.

db.company_drives.aggregate([
  {
    $lookup: {
      from: "users",
      localField: "user_id",
      foreignField: "_id",
      as: "student"
    }
  },
  {
    $unwind: "$student"
  },
  {
    $project: {
      company: 1,
      date: 1,
      "student.name": 1
    }
  }
]);

output:
[  
  {
    _id: ObjectId('680cb7fcac23bbf581b5f899'),
    company: 'IBM',
    date: ISODate('2020-10-20T00:00:00.000Z'),
    student: { name: 'Ram' }
  },
  {
    _id: ObjectId('680cb7fcac23bbf581b5f89a'),
    company: 'Zohoo',
    date: ISODate('2020-10-25T00:00:00.000Z'),
    student: { name: 'Rio' }
  },
  {
    _id: ObjectId('680cb7fcac23bbf581b5f89b'),
    company: 'Google',
    date: ISODate('2020-11-01T00:00:00.000Z'),
    student: { name: 'pooja' }
  }
]
----------------------------------------------------------------------------------------------------------------
 4) Find the number of problems solved by the user in codekata
db.codekata.aggregate([
  {
    $lookup: {
      from: "users",
      localField: "user_id",
      foreignField: "_id",
      as: "user"
    }
  },
  {
    $unwind: "$user"
  },
  {
    $project: {
      _id: 0,
      user_name: "$user.name",
      problems_solved: 1
    }
  }
]);
output:
[
  { problems_solved: 150, user_name: 'Ram' },
  { problems_solved: 100, user_name: 'Rio' },
  { problems_solved: 80, user_name: 'pooja' }
]

-----------------------------------------------------------------------------------------------------------------

5) Find all the mentors who has more than 15 mentees
db.mentors.find({ mentee_count: { $gt: 15 } });

output:
[ { _id: 1, name: 'john', mentee_count: 25 } ]

-------------------------------------------------------------------------------------------------------------------

6) Find number of users who are absent and task not submitted between 15-oct-2020 and 31-oct-2020
db.attendance.aggregate([
  {
    $match: {
      present: false,
      date: { $gte: new Date("2020-10-15"), $lte: new Date("2020-10-31") }
    }
  },
  {
    $lookup: {
      from: "tasks",
      localField: "user_id",
      foreignField: "user_id",
      as: "user_tasks"
    }
  },
  {
    $unwind: "$user_tasks"
  },
  {
    $match: {
      "user_tasks.submitted": false,
      "user_tasks.date": { $gte: new Date("2020-10-15"), $lte: new Date("2020-10-31") }
    }
  },
  {
    $group: {
      _id: "$user_id"
    }
  },
  {
    $count: "absent_and_not_submitted"
  }
]);

Output: [ { absent_and_not_submitted: 1 }]